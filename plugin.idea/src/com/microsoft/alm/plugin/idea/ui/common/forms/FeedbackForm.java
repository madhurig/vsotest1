// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

package com.microsoft.alm.plugin.idea.ui.common.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.JBUI;
import com.microsoft.alm.plugin.idea.resources.TfPluginBundle;
import com.microsoft.alm.plugin.idea.ui.common.SwingHelper;
import com.microsoft.alm.plugin.idea.ui.controls.Hyperlink;
import com.microsoft.alm.plugin.idea.ui.controls.WrappingLabel;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

public class FeedbackForm {
    public final static String CMD_GOTO_PRIVACY = "gotoPrivacy";

    private JTextArea comment;
    private JLabel commentLabel;
    private Hyperlink privacyLink;
    private JTextField email;
    private JPanel contentPanel;
    private JScrollPane commentScrollPane;
    private WrappingLabel thankYouLabel;
    private boolean initialized = false;

    public FeedbackForm() {
    }

    public String getComment() {
        return comment.getText();
    }

    public String getEmail() {
        return email.getText();
    }

    public void addActionListener(final ActionListener listener) {
        // Hook up listener to all actions
        privacyLink.addActionListener(listener);
    }

    public JComponent getContentPanel(final boolean smile) {
        ensureInitialized(smile);
        contentPanel.setPreferredSize(new Dimension(JBUI.scale(400), JBUI.scale(300)));
        return contentPanel;
    }

    public JComponent getEmailComponent() {
        return email;
    }

    private void ensureInitialized(final boolean smile) {
        if (!initialized) {
            // Ensure that the commands are set up correctly
            privacyLink.setActionCommand(CMD_GOTO_PRIVACY);

            // Fix tab keys on text area
            SwingHelper.fixTabKeys(comment);

            // Change localized text if NOT smile
            if (!smile) {
                commentLabel.setText(TfPluginBundle.message(TfPluginBundle.KEY_FEEDBACK_DIALOG_COMMENT_LABEL_FROWN));
            }

            // Make sure the comment field has a reasonable height, margins, and font
            SwingHelper.setPreferredHeight(commentScrollPane, 100);
            commentScrollPane.setMinimumSize(new Dimension(JBUI.scale(200), JBUI.scale(70)));
            SwingHelper.copyFontAndMargins(comment, email);

            initialized = true;
        }
    }

    public JComponent getPreferredFocusedComponent() {
        return comment;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        commentLabel = new JLabel();
        this.$$$loadLabelText$$$(commentLabel, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackDialog.CommentLabel.Smile"));
        contentPanel.add(commentLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        privacyLink = new Hyperlink();
        this.$$$loadLabelText$$$(privacyLink, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackForm.PrivacyLink"));
        contentPanel.add(privacyLink, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPanel.add(spacer1, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackForm.EmailLabel"));
        contentPanel.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        email = new JTextField();
        contentPanel.add(email, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        commentScrollPane = new JScrollPane();
        commentScrollPane.setHorizontalScrollBarPolicy(31);
        contentPanel.add(commentScrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        comment = new JTextArea();
        comment.setLineWrap(true);
        commentScrollPane.setViewportView(comment);
        thankYouLabel = new WrappingLabel();
        thankYouLabel.setText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("FeedbackForm.ThankYouLabel"));
        contentPanel.add(thankYouLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        commentLabel.setLabelFor(comment);
        label1.setLabelFor(email);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
