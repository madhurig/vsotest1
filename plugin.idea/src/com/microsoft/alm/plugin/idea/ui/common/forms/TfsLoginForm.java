// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

package com.microsoft.alm.plugin.idea.ui.common.forms;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.JBUI;
import com.microsoft.alm.plugin.idea.resources.Icons;
import com.microsoft.alm.plugin.idea.resources.TfPluginBundle;
import com.microsoft.alm.plugin.idea.ui.controls.BusySpinnerPanel;
import com.microsoft.alm.plugin.idea.ui.controls.Hyperlink;
import com.microsoft.alm.plugin.idea.ui.controls.IconPanel;
import com.microsoft.alm.plugin.idea.ui.controls.WrappingLabel;
import org.apache.commons.lang.StringUtils;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

/**
 * This form is hosted by the TfsCheckoutPage.
 */
public class TfsLoginForm implements LoginForm {
    private JTextField serverUrl;
    private Hyperlink signInLink;
    private IconPanel vsIcon;
    private JPanel contentPanel;
    private JLabel exampleLabel;
    private WrappingLabel descriptionLabel;
    private JLabel headerLabel;
    private BusySpinnerPanel busySpinner;
    private JLabel loginProgressLabel;
    private boolean initialized = false;

    @Override
    public JPanel getContentPanel() {
        ensureInitialized();
        return contentPanel;
    }

    @Override
    public String getServerName() {
        return StringUtils.trim(serverUrl.getText());
    }

    @Override
    public void setServerName(final String serverName) {
        serverUrl.setText(serverName);
    }

    @Override
    public JComponent getServerNameComponent() {
        return serverUrl;
    }

    @Override
    public void addActionListener(final ActionListener listener) {
        // Hook up listener to all actions
        signInLink.addActionListener(listener);
    }

    @Override
    public void setAuthenticating(boolean inProgress) {
        if (inProgress) {
            busySpinner.start(true);
            loginProgressLabel.setText(TfPluginBundle.message(TfPluginBundle.KEY_LOGIN_FORM_AUTHENTICATING_TFS));
        } else {
            busySpinner.stop(true);
            loginProgressLabel.setText("");
        }
    }

    private void createUIComponents() {
        vsIcon = new IconPanel(Icons.VSLogo);
    }

    private void ensureInitialized() {
        if (!initialized) {
            // Ensure that the commands are set up correctly
            signInLink.setActionCommand(CMD_SIGN_IN);

            // Ensure that fonts are scaled appropriately
            headerLabel.setFont(JBUI.Fonts.label(20.0f));
            signInLink.setFont(JBUI.Fonts.label(16.0f));
            exampleLabel.setFont(JBUI.Fonts.label(9.0f));

            // Make sure the busy spinner size is scaled properly
            Dimension size = new Dimension(JBUI.scale(20), JBUI.scale(20));
            busySpinner.setPreferredSize(size);
            busySpinner.setMinimumSize(size);

            // Add some margin under the description label
            descriptionLabel.setMargin(new Insets(0, 0, JBUI.scale(15), 0));

            initialized = true;
        }
    }

    @Override
    public void initFocus() {
        serverUrl.requestFocus();
    }

    /**
     * Getter for unit test
     */
    BusySpinnerPanel getBusySpinner() {
        return this.busySpinner;
    }

    /**
     * Setter for unit test
     */
    void setServerUrl(final String serverUrl) {
        this.serverUrl.setText(serverUrl);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(7, 5, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        contentPanel.add(spacer1, new GridConstraints(6, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        headerLabel = new JLabel();
        this.$$$loadLabelText$$$(headerLabel, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.Header"));
        contentPanel.add(headerLabel, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.ServerUrl"));
        contentPanel.add(label1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        serverUrl = new JTextField();
        contentPanel.add(serverUrl, new GridConstraints(2, 2, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        exampleLabel = new JLabel();
        this.$$$loadLabelText$$$(exampleLabel, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.ExampleUrl"));
        contentPanel.add(exampleLabel, new GridConstraints(3, 2, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        signInLink = new Hyperlink();
        this.$$$loadLabelText$$$(signInLink, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.Connect"));
        contentPanel.add(signInLink, new GridConstraints(4, 2, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        contentPanel.add(vsIcon, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loginProgressLabel = new JLabel();
        loginProgressLabel.setText("Sample Text for Busy Spinner Message");
        contentPanel.add(loginProgressLabel, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        busySpinner = new BusySpinnerPanel();
        contentPanel.add(busySpinner, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPanel.add(spacer2, new GridConstraints(5, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        descriptionLabel = new WrappingLabel();
        descriptionLabel.setText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("TfsLoginForm.Description"));
        contentPanel.add(descriptionLabel, new GridConstraints(1, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
